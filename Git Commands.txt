GIT HUB COMMANDS

0. git --version                (tellus us the version of the Git that You have installed)

1. git config --global user.name UtkarshSinghChouhan  	  (To set the user name)

2. git config --global user.email uscutkarsh9@gmail.com   (To set the user email)

    [Note: We have used '--global' parameter, suppose if we have not used this parameter then the name and email will be valid for this repository only
           but now the name and email will be valid for all the repositories.]

3. git config --global user.name   			(To check the user name)

4. git config --global user.email   			(To check the user email)

5. git init  						(To initialize or create an empty repository)

6. ls                               (To see all folders excluding the hidden folders)

6. ls -lart  						(To see all folders including the hidden folders)

7. git status						(Tells U the status of the file weather untracked, unmodifies, modified or staged)

8. git add file_name_with_extension			(To move untracked file into the staging area)

9. touch file_name_with_extension			(To create any file)

10. git add -A 						(To add multiple file into the staging area)

10. git add .                        (this command add all files to the staging area)

11. git commit                      (To start the tracking of our project initially we need to commit using this command)

11. git commit -m "Any_message"				(To commit multiple files at once i.e. to move them to the unmodified status)

12. git checkout file_name				(To match with the previous commit meaning undo the changes on a single file )

13. git checkout -f					(To undo changes on the multiple file)

14. git log		and type ':q' to exit				(Show us all the commits we have done till this command)

15. git log -p -n (where, n is any integer)   and press ':q' to exit          (Show the number of the previous commits as specified by the value of 'n')

16. git diff            (this command compares my working directory with the staging area)

17. git diff --staged   (this command compares staging area with the last commit)

18. git commit -a -m "Any_message"          (This command directly commit the changed made on the file without have to 'stage' the changed first )

19. git -rm                     (this command deletes the file as a result it gets removed from the staging area)

20. git rm --cached  <file_name_with_extension>          (this command only removes the file from the staging area, as a result it becomes an 'untracked_file' but we still have the file copy in our hardisk)

21. IN ORDER TO IGNORE A FILE FROM ADDING INTO YOU GIT REPOSITORY.

      -> First we need to make a '.gitignore' file using 'touch .gitignore'

      ->  Now suppose we want to ignore 'logs.txt' file from being added into the repository,
          it doesn't matter weather the file is inside a folder(every exsistance of the file will be ignored)

      -> For this we simply need to add or file into the '.gitignore' file and thats it.

      -> Now if we want to ignore all the files with extension '.txt' we need to add '*.txt'
         into the '.gitignore'.
    
      -> Now if we only want to ignore that instance of the file 'logs.txt' which is present
         inside the '.gitignore' and all the rest instances or copies of this file will be added into the git repository,
         then in that case we need to write '/logs.txt' in the '.gitignore'.

     -> Now if we want to ignore a folder we need to write '<foldername>/' inside the '.gitignore'

22. BRANCH IN GIT(By default we are in the master branch)

    -> Command to view the number of branches available
        git branch

    -> Command to create a Branch
        git branch <Branch_Name>
    
    -> Command to enter into a particular branch
        git checkout <Branch_Name>

    -> Command to create a branch and enter that branch simultaneously
        git checkout -b <Branch_Name>

    -> Command to merge a particular branch with the master-branch
        git merge <Branch_name>
        [Note that we need to be in the master-branch in order to merge any other branch with the master-branch]

    -> Command to delete a particular branch
        git branch -d <Branch_Name>         (If the branch contains unmerged changes, Git will refuse to delete it )

       In such case we will have to force the deletion by replacing the -d parameter with an uppercase D:
        git branch -D <Branch_Name>

23. PUSH COMMANDS
    git push -u origin <Branch_Name>
        (Here 'origin' refers to the gitHub server where we want to push the master or any other branch) 